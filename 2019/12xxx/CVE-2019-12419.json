{
    "data_type": "CVE",
    "data_format": "MITRE",
    "data_version": "4.0",
    "CVE_data_meta": {
        "ID": "CVE-2019-12419",
        "ASSIGNER": "security@apache.org",
        "STATE": "PUBLIC"
    },
    "affects": {
        "vendor": {
            "vendor_data": [
                {
                    "vendor_name": "Apache",
                    "product": {
                        "product_data": [
                            {
                                "product_name": "Apache CXF",
                                "version": {
                                    "version_data": [
                                        {
                                            "version_value": "versions before 3.3.4 and 3.2.11"
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            ]
        }
    },
    "problemtype": {
        "problemtype_data": [
            {
                "description": [
                    {
                        "lang": "eng",
                        "value": "Apache CXF OpenId Connect token service does not properly validate the clientId"
                    }
                ]
            }
        ]
    },
    "references": {
        "reference_data": [
            {
                "refsource": "CONFIRM",
                "name": "http://cxf.apache.org/security-advisories.data/CVE-2019-12419.txt.asc",
                "url": "http://cxf.apache.org/security-advisories.data/CVE-2019-12419.txt.asc"
            }
        ]
    },
    "description": {
        "description_data": [
            {
                "lang": "eng",
                "value": "Apache CXF before 3.3.4 and 3.2.11 provides all of the components that are required to build a fully fledged OpenId Connect service. There is a vulnerability in the access token services, where it does not validate that the authenticated principal is equal to that of the supplied clientId parameter in the request. If a malicious client was able to somehow steal an authorization code issued to another client, then they could exploit this vulnerability to obtain an access token for the other client."
            }
        ]
    }
}