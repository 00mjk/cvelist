{
    "CVE_data_meta": {
        "ASSIGNER": "security-advisories@github.com",
        "ID": "CVE-2020-15134",
        "STATE": "PUBLIC",
        "TITLE": "Missing TLS certificate verification in Faye"
    },
    "affects": {
        "vendor": {
            "vendor_data": [
                {
                    "product": {
                        "product_data": [
                            {
                                "product_name": "faye",
                                "version": {
                                    "version_data": [
                                        {
                                            "version_value": "< 1.4.0"
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "vendor_name": "faye"
                }
            ]
        }
    },
    "data_format": "MITRE",
    "data_type": "CVE",
    "data_version": "4.0",
    "description": {
        "description_data": [
            {
                "lang": "eng",
                "value": "Faye before version 1.4.0, there is a lack of certification validation in TLS handshakes.\n\nFaye uses em-http-request and faye-websocket in the Ruby version of\nits client. Those libraries both use the `EM::Connection#start_tls` method\nin EventMachine to implement the TLS handshake whenever a `wss:` URL is\nused for the connection. This method does not implement certificate verification\nby default, meaning that it does not check that the server presents a valid and\ntrusted TLS certificate for the expected hostname. That means that any `https:`\nor `wss:` connection made using these libraries is vulnerable to a\nman-in-the-middle attack, since it does not confirm the identity of the server\nit is connected to.\n\nThe first request a Faye client makes is always sent via normal HTTP, but later\nmessages may be sent via WebSocket. Therefore it is vulnerable to the same\nproblem that these underlying libraries are, and we needed both libraries to\nsupport TLS verification before Faye could claim to do the same. Your client\nwould still be insecure if its initial HTTPS request was verified, but later\nWebSocket connections were not.\n\nThis is fixed in Faye v1.4.0, which enables verification by default.\n\nFor further background information on this issue, please see the referenced GitHub Advisory."
            }
        ]
    },
    "impact": {
        "cvss": {
            "attackComplexity": "HIGH",
            "attackVector": "NETWORK",
            "availabilityImpact": "NONE",
            "baseScore": 8,
            "baseSeverity": "HIGH",
            "confidentialityImpact": "HIGH",
            "integrityImpact": "HIGH",
            "privilegesRequired": "NONE",
            "scope": "CHANGED",
            "userInteraction": "REQUIRED",
            "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N",
            "version": "3.1"
        }
    },
    "problemtype": {
        "problemtype_data": [
            {
                "description": [
                    {
                        "lang": "eng",
                        "value": "CWE-295: Improper Certificate Validation"
                    }
                ]
            }
        ]
    },
    "references": {
        "reference_data": [
            {
                "name": "https://github.com/faye/faye/security/advisories/GHSA-3q49-h8f9-9fr9",
                "refsource": "CONFIRM",
                "url": "https://github.com/faye/faye/security/advisories/GHSA-3q49-h8f9-9fr9"
            },
            {
                "name": "https://blog.jcoglan.com/2020/07/31/missing-tls-verification-in-faye/",
                "refsource": "MISC",
                "url": "https://blog.jcoglan.com/2020/07/31/missing-tls-verification-in-faye/"
            }
        ]
    },
    "source": {
        "advisory": "GHSA-3q49-h8f9-9fr9",
        "discovery": "UNKNOWN"
    }
}